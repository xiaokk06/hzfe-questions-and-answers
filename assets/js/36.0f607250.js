(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{225:function(e,t,s){"use strict";s.r(t);var _=s(0),n=Object(_.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[e._m(0),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),e._m(24),e._v(" "),e._m(25),e._v(" "),e._m(26),e._v(" "),s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN - HTTP Overview"),s("OutboundLink")],1)])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{attrs:{class:"token comment"}},[this._v("# 此页面贡献者：年轻的小铲")]),this._v("\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"http"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("超文本传输协议 ( "),s("code",[e._v("HTTP")]),e._v(" ) 被设计于上20世纪90年代初期，是一种具有可扩展性的 "),s("code",[e._v("应用层协议")]),e._v("，它是为 "),s("code",[e._v("Web")]),e._v(" 浏览器和 "),s("code",[e._v("Web")]),e._v(" 服务器之间的通信而设计的(当然也可以用作其他目的)，用于传输超媒体文档(例如 "),s("code",[e._v("HTML")]),e._v(" )。一般通过 "),s("code",[e._v("TCP")]),e._v(" 或 "),s("code",[e._v("TLS")]),e._v(" 加密的 "),s("code",[e._v("TCP")]),e._v(" 连接来发送，但理论上也可以使用任何其他可靠的传输协议。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("HTTP")]),e._v(" 遵循经典的客户端 - 服务器模型，客户端和服务端通过交换各自的消息来进行交互。客户端打开一个连接( "),s("code",[e._v("connection")]),e._v(" )，发出消息(请求 "),s("code",[e._v("requests")]),e._v(" )，然后等待，直到收到服务端的消息(回应 "),s("code",[e._v("responses")]),e._v(" )。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("也就是说， "),s("code",[e._v("request")]),e._v(" 通过一个实体被发出，实体也就是用户代理 ("),s("code",[e._v("user-agent")]),e._v("：可以是代表用户行为的任何工具，比如抓取网页来填充和维护搜索引擎索引的机器人)。大多数情况下，这个 "),s("code",[e._v("user-agent")]),e._v(" 是指 Web 浏览器。每一个发送到服务器的 "),s("code",[e._v("request")]),e._v(" ，都会被服务器处理并返回一个 "),s("code",[e._v("response")]),e._v(" 。在这个 "),s("code",[e._v("request")]),e._v(" 和 "),s("code",[e._v("response")]),e._v(" 之间有许多实体，总称为代理(以下称 "),s("code",[e._v("proxy")]),e._v(" )，他们的作用与表现各不相同，比如有些是网关，还有些是缓存等。请看以下流程图(实际上，在 "),s("code",[e._v("Client")]),e._v(" 和 "),s("code",[e._v("Server")]),e._v(" 之间，还有路由器，调制解调器等等。由于 Web 的层次设计，这些在网络层和传输层的内容不在此展开)：")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("----------         ---------         ---------         ----------\n|        |  ----\x3e  |       |  ----\x3e  |       |  ----\x3e  |        |\n| Client |         | Proxy |         | Proxy |         | Server |\n|        |  <----  |       |  <----  |       |  <----  |        |\n----------         ---------         ---------         ----------\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("当 "),t("code",[this._v("Client")]),this._v(" 想要与 "),t("code",[this._v("Server")]),this._v(" 通信时，无论是最终服务器还是中间代理，它都会执行以下步骤：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ol",[s("li",[s("p",[s("strong",[e._v("打开一个 "),s("code",[e._v("TCP")]),e._v(" 连接")])]),e._v(" "),s("p",[s("code",[e._v("TCP")]),e._v(" 连接用来发送一条或多条 "),s("code",[e._v("request")]),e._v(" 和获取 "),s("code",[e._v("response")]),e._v("。 "),s("code",[e._v("Client")]),e._v(" 可能会打开一个新连接，或重用现有连接，或打开多个到 "),s("code",[e._v("Server")]),e._v(" 的 "),s("code",[e._v("TCP")]),e._v(" 连接。")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("发送一个 "),s("code",[e._v("HTTP")]),e._v(" 报文 （HTTP报文的类型：请求）")])]),e._v(" "),s("p",[s("code",[e._v("HTTP")]),e._v(" 报文（在 "),s("code",[e._v("HTTP/2")]),e._v(" 之前）语义是可读的。在 "),s("code",[e._v("HTTP/2")]),e._v(" 中，这些消息被嵌入到了一个新的二进制结构，帧。帧能实现一些优化，比如报文头部的压缩和复用（这使得报文不能被直接读取）。即使只有一部分原始 "),s("code",[e._v("HTTP")]),e._v(" 报文以 "),s("code",[e._v("HTTP/2")]),e._v(" 发送出来，每条报文的语义依旧不变，客户端会重组原始 "),s("code",[e._v("HTTP/1.1")]),e._v(" 请求。所以两者的原理还是保持不变的。")]),e._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[e._v("/**\n * {Method} / {Version of protocol}\n * {Method}: GET POST PUT DELETE OPTIONS ....\n * {Version of protocol}: HTTP/1.1\n *\n * Headers: Host Accept-Language ....\n */")]),e._v("\n"),s("span",{attrs:{class:"token constant"}},[e._v("GET")]),e._v(" "),s("span",{attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),s("span",{attrs:{class:"token constant"}},[e._v("HTTP")]),s("span",{attrs:{class:"token operator"}},[e._v("/")]),s("span",{attrs:{class:"token number"}},[e._v("1.1")]),e._v("\nHost"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" developer"),s("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("mozilla"),s("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("org\nAccept"),s("span",{attrs:{class:"token operator"}},[e._v("-")]),e._v("Language"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" fr\n")])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("读取服务端返回的报文信息 （HTTP报文的类型：回应）")])]),e._v(" "),s("div",{staticClass:"language-JavaScript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token comment"}},[e._v("/**\n * {Version of protocol} {Status code} {Status message}\n * {Version of protocol}: HTTP/1.1\n * {Status code}: 200 304 400 403 404 406 500 ....\n *\n * Headers: Date Server Last-Modified ETag Accept-Ranges Content-Length Content-Type ....\n */")]),e._v("\n"),s("span",{attrs:{class:"token constant"}},[e._v("HTTP")]),s("span",{attrs:{class:"token operator"}},[e._v("/")]),s("span",{attrs:{class:"token number"}},[e._v("1.1")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("200")]),e._v(" "),s("span",{attrs:{class:"token constant"}},[e._v("OK")]),e._v("\nDate"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Sat"),s("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("09")]),e._v(" Oct "),s("span",{attrs:{class:"token number"}},[e._v("2010")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("14")]),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{attrs:{class:"token number"}},[e._v("28")]),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{attrs:{class:"token number"}},[e._v("02")]),e._v(" "),s("span",{attrs:{class:"token constant"}},[e._v("GMT")]),e._v("\nServer"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Apache\nLast"),s("span",{attrs:{class:"token operator"}},[e._v("-")]),e._v("Modified"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" Tue"),s("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("01")]),e._v(" Dec "),s("span",{attrs:{class:"token number"}},[e._v("2009")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("20")]),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{attrs:{class:"token number"}},[e._v("18")]),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),s("span",{attrs:{class:"token number"}},[e._v("22")]),e._v(" "),s("span",{attrs:{class:"token constant"}},[e._v("GMT")]),e._v("\nETag"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{attrs:{class:"token string"}},[e._v('"51142bc1-7449-479b075b2891b"')]),e._v("\nAccept"),s("span",{attrs:{class:"token operator"}},[e._v("-")]),e._v("Ranges"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" bytes\nContent"),s("span",{attrs:{class:"token operator"}},[e._v("-")]),e._v("Length"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{attrs:{class:"token number"}},[e._v("29769")]),e._v("\nContent"),s("span",{attrs:{class:"token operator"}},[e._v("-")]),e._v("Type"),s("span",{attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" text"),s("span",{attrs:{class:"token operator"}},[e._v("/")]),e._v("html\n\n"),s("span",{attrs:{class:"token operator"}},[e._v("<")]),s("span",{attrs:{class:"token operator"}},[e._v("!")]),s("span",{attrs:{class:"token constant"}},[e._v("DOCTYPE")]),e._v(" html"),s("span",{attrs:{class:"token operator"}},[e._v("...")]),e._v(" "),s("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("here comes the "),s("span",{attrs:{class:"token number"}},[e._v("29769")]),e._v(" bytes "),s("span",{attrs:{class:"token keyword"}},[e._v("of")]),e._v(" the requested web page"),s("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])])])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("关闭连接或者为后续 "),s("code",[e._v("request")]),e._v(" 重用连接")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"stateless"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stateless","aria-hidden":"true"}},[this._v("#")]),this._v(" Stateless")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("HTTP")]),e._v(" 是一种 "),s("code",[e._v("无状态协议")]),e._v(" ，在同一个连接中，两个执行成功的请求之间是没有联系的。也就是说，服务器不会在两个请求之间保留任何数据(状态)。比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。"),s("code",[e._v("HTTP")]),e._v(" 本质是无状态的，但是 "),s("code",[e._v("HTTP Cookies")]),e._v(" 可以创建有状态的会话。使用 "),s("code",[e._v("HTTP")]),e._v(" 的头部扩展，令 "),s("code",[e._v("HTTP Cookies")]),e._v(" 被添加到工作流中，就会允许在每个HTTP请求上创建会话以共享相同的上下文或相同的状态。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"extensible"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensible","aria-hidden":"true"}},[this._v("#")]),this._v(" Extensible")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[t("code",[this._v("HTTP")]),this._v(" 的可扩展性体现在 "),t("code",[this._v("HTTP/1.0")]),this._v(" 中提出的 "),t("code",[this._v("HTTP headers")]),this._v(" 中。 它让协议扩展变得非常容易。只要服务端和客户端就新 headers 达成语义一致，新功能就可以被轻松加入进来。可以用HTTP控制的常用功能有：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[s("strong",[e._v("缓存")]),e._v(" "),s("ul",[s("li",[e._v("如何缓存文档，能通过HTTP来控制。"),s("code",[e._v("Server")]),e._v(" 可以指示 "),s("code",[e._v("proxies")]),e._v(" 和 "),s("code",[e._v("Client")]),e._v(" 缓存什么内容，缓存多久。而客户端也能够命令中间的缓存代理来忽略存储的文档。")])])]),e._v(" "),s("li",[s("strong",[e._v("开放同源限制")]),e._v(" "),s("ul",[s("li",[e._v("为防止网络窥探和其他隐私入侵，Web 浏览器强制严格分离网站。只有来自同一来源的页面才能访问网页的所有信息。虽然这样的约束对服务器来说是一种负担，但 "),s("code",[e._v("HTTP headers")]),e._v(" 可以放宽服务器端的严格分离，从而使文档成为来自不同域的信息的拼凑体（这样做可能有安全相关的原因）。")])])]),e._v(" "),s("li",[s("strong",[e._v("认证")]),e._v(" "),s("ul",[s("li",[e._v("某些页面可能受到保护，因此只有特定的用户才能访问它。基本认证可以由 "),s("code",[e._v("HTTP")]),e._v(" 提供，或者使用 "),s("code",[e._v("WWW-Authenticate")]),e._v(" 和类似的 "),s("code",[e._v("Headers")]),e._v(" ，或者通过使用 "),s("code",[e._v("HTTP cookie")]),e._v(" 设置特定的会话。")])])]),e._v(" "),s("li",[s("strong",[e._v("代理和隧道")]),e._v(" "),s("ul",[s("li",[e._v("服务器或客户端通常位于内联网上，并向其他人隐藏其真实IP地址。"),s("code",[e._v("HTTP request")]),e._v(" 通过 "),s("code",[e._v("proxies")]),e._v(" 来跨越这个网络障碍。并非所有的 "),s("code",[e._v("proxies")]),e._v(" 都是 "),s("code",[e._v("HTTP proxies")]),e._v(" 。比如 SOCKS 协议，运作在更底层。像 FTP 这样的协议，能够被这些 "),s("code",[e._v("proxies")]),e._v(" 处理。")])])]),e._v(" "),s("li",[s("strong",[e._v("会话")]),e._v(" "),s("ul",[s("li",[e._v("使用 "),s("code",[e._v("HTTP Cookies")]),e._v(" 可以将请求与服务器的状态关联起来。尽管基本的 "),s("code",[e._v("HTTP")]),e._v(" 是一种无状态协议，但这会创建会话。这不仅适用于购物车这种的电商需求，也适用于任何网站上的用户定制展示内容的需求。")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"client-user-agent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#client-user-agent","aria-hidden":"true"}},[this._v("#")]),this._v(" Client: user-agent")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("为了呈现网页，浏览器首先发送一个 "),t("code",[this._v("request")]),this._v(" 来获取页面的 "),t("code",[this._v("HTML")]),this._v(" 文档。然后解析该文件，获取与执行脚本、CSS样式表相对应的其他请求，以及页面中包含的子资源(通常为图像和视频)。然后，浏览器将这些资源整合到一起，展现出一个完整的文档，也就是网页。浏览器执行的脚本可以在之后的阶段获取更多资源，并相应地更新网页。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("网页是超文本文件。这意味着某些是链接的显示文本，可以(一般通过鼠标点击)被激活来获取新的网页，由此，用户可以指挥和利用他们的 "),s("code",[e._v("user-agent")]),e._v(" 来进行网页浏览。"),s("code",[e._v("user-agent")]),e._v(" 来负责发送这些 "),s("code",[e._v("HTTP request")]),e._v(" ，并进一步解释 "),s("code",[e._v("HTTP response")]),e._v(" 以向用户提供明确的响应。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"server"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#server","aria-hidden":"true"}},[this._v("#")]),this._v(" Server")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在上述通信过程的另一端，是 "),t("code",[this._v("Web Server")]),this._v(" ，提供 "),t("code",[this._v("Client")]),this._v(" 所请求的文档。 "),t("code",[this._v("Server")]),this._v(" 仅在虚拟意义上代表一台服务器，实际上，他可能是共享负载(负载均衡)的一组服务器组成的计算机集群，也可能是一种复杂的软件，通过向其他计算机(如缓存，数据库服务器，电子商务服务器 ，...)发起请求来获取部分或全部资源。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("Server")]),e._v(" 不一定是一台机器，但一台机器上，可以托管多个 "),s("code",[e._v("Server")]),e._v(" 。通过 "),s("code",[e._v("HTTP/1.1")]),e._v(" 和 "),s("code",[e._v("Host header")]),e._v(" ，他们甚至可以共享相同的 "),s("code",[e._v("IP")]),e._v(" 地址。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy","aria-hidden":"true"}},[this._v("#")]),this._v(" Proxy")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("在 "),s("code",[e._v("client")]),e._v(" 和 "),s("code",[e._v("Server")]),e._v(" 之间，有许多计算机和其他设备转发了 "),s("code",[e._v("HTTP")]),e._v(" 消息。由于 Web 栈层次结构设计的原因，它们大多都出现在传输层、网络层和物理层上，对于 "),s("code",[e._v("HTTP")]),e._v(" 应用层而言就是透明的(虽然它们可能会对应用层性能有重要影响)。还有一部分表现在应用层上，被称为 "),s("code",[e._v("Proxy")]),e._v(" 。 "),s("code",[e._v("Proxy")]),e._v(" 既可以表现得透明，又可以不透明(改变请求不通过它们)，并且可以执行许多功能：")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ul",[s("li",[e._v("缓存(可以是公开的也可以是私有的，像浏览器的缓存)")]),e._v(" "),s("li",[e._v("过滤(像反病毒扫描，家长控制...)")]),e._v(" "),s("li",[e._v("负载平衡(允许多个服务器为不同的请求提供服务)")]),e._v(" "),s("li",[e._v("认证(对不同资源进行权限管理)")]),e._v(" "),s("li",[e._v("日志记录(允许存储历史信息)")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"connection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#connection","aria-hidden":"true"}},[this._v("#")]),this._v(" Connection")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("连接在传输层进行控制，因此基本上不属于 "),s("code",[e._v("HTTP")]),e._v(" 范畴。 "),s("code",[e._v("HTTP")]),e._v(" 不要求底层传输协议是 "),s("code",[e._v("connection-based")]),e._v(" 的；只要求它是可靠的，不丢失消息的(至少会返回错误)。在互联网上最常见的两种传输协议中，"),s("code",[e._v("TCP")]),e._v(" 是可靠的，而 "),s("code",[e._v("UDP")]),e._v(" 不是。 因此，"),s("code",[e._v("HTTP")]),e._v(" 依赖于"),s("code",[e._v("connection-based")]),e._v(" 的 "),s("code",[e._v("TCP")]),e._v(" 进行消息传递，虽然并不是总需要 "),s("code",[e._v("connection")]),e._v("。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[s("code",[e._v("HTTP/1.0")]),e._v(" 为每一个 "),s("code",[e._v("request")]),e._v(" / "),s("code",[e._v("response")]),e._v(" 都打开一个 "),s("code",[e._v("TCP")]),e._v(" 连接，导致了2个缺点：打开一个 "),s("code",[e._v("TCP")]),e._v(" 连接需要多次往返消息，因此速度慢。但当多个消息周期性发送时，这样就变得更加高效：暖连接比冷连接更高效。")])},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("p",[e._v("为了减轻这些缺陷，以减少连接开销，"),s("code",[e._v("HTTP/1.1")]),e._v(" 引入了长连接( "),s("code",[e._v("persistent connections")]),e._v(" )：底层 "),s("code",[e._v("TCP")]),e._v(" 连接可以通过 "),s("code",[e._v("Connection header")]),e._v(" 来实现部分控制。而 "),s("code",[e._v("HTTP/2")]),e._v(" 则更进一步，通过在单个连接上复用消息的方式，来保持该连接为暖连接，提高效率。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"学习资料"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习资料","aria-hidden":"true"}},[this._v("#")]),this._v(" 学习资料")])}],!1,null,null,null);t.default=n.exports}}]);